Clase: Persona (abstracta)
# ci: String
# nombre: String
# apellidos: String
# sexo: Sexo
# activo: boolean
# guardiasAsignadas: int
# cantidadGuardiasFestivo: int
# guardiasCumplidas: int
+ Persona(String, String, String, Sexo, boolean, int, int)
+ getCi(): String
+ setCi(String)
+ getNombre(): String
+ setNombre(String)
+ getApellidos(): String
+ setApellidos(String)
+ getSexo(): Sexo
+ setSexo(Sexo)
+ getActivo(): boolean
+ setActivo(boolean)
+ getGuardiasAsignadas(): int
+ setGuardiasAsignadas(int)
+ getGuardiasCumplidas(): int
+ setGuardiasCumplidas(int)
+ getCantidadGuardiasFestivo(): int
+ setCantidadGuardiasFestivo(int)
# puedeHacerGuardia(Horario): boolean (abstracto)

Clase: Estudiante extends Persona
- licenciaMatricula: boolean
- baja: boolean
- grupo: int
- guardiasRecuperacion: int
- guardiasIncumplidas: int
- guardiasRecuperacionAsignadas: int
+ Estudiante(String, String, String, Sexo, boolean, int, int, int, int, int)
+ isLicenciaMatricula(): boolean
+ setLicenciaMatricula(boolean)
+ isBaja(): boolean
+ setBaja(boolean)
+ getGrupo(): int
+ setGrupo(int)
+ getGuardiasCumplidas(): int
+ setGuardiasCumplidas(int)
+ getGuardiasRecuperacion(): int
+ setGuardiasRecuperacion(int)
+ getGuardiasIncumplidas(): int
+ setGuardiasIncumplidas(int)
+ puedeHacerGuardia(Horario): boolean
+ incrementarGuardiasAsignadas()
+ registrarGuardiaCumplida()
+ calcularGuardiasPendientes(): int
+ tieneGuardiasPendientes(): boolean

Clase: Trabajador extends Persona
- fechaDeIncorporacion: LocalDate
- voluntario: boolean
- fechaGuardiaVoluntaria: LocalDate
+ Trabajador(String, String, String, Sexo, boolean, LocalDate, int, int, int, boolean, LocalDate)
+ getFechaDeIncorporacion(): LocalDate
+ setFechaDeIncorporacion(LocalDate)
+ getVoluntario(): boolean
+ setVoluntario(boolean)
+ getFechaGuardiaVoluntaria(): LocalDate
+ setFechaGuardiaVoluntaria(LocalDate)
+ puedeHacerGuardia(Horario): boolean

Clase: Guardia
- id: int
- tipo: TipoGuardia
- persona: Persona
- horario: Horario
- cumplida: boolean
+ Guardia(int, TipoGuardia, Persona, Horario)
+ getId(): int
+ setId(int)
+ getTipo(): TipoGuardia
+ setTipo(TipoGuardia)
+ getPersona(): Persona
+ setPersona(Persona)
+ getHorario(): Horario
+ setHorario(Horario)
+ getCumplida(): boolean
+ setCumplida(boolean)

Clase: Horario
- dia: LocalDate
- horaInicio: LocalTime
- horaFin: LocalTime
+ Horario(LocalDate, LocalTime, LocalTime)
+ getDia(): LocalDate
+ setDia(LocalDate)
+ getHoraInicio(): LocalTime
+ setHoraInicio(LocalTime)
+ getHoraFin(): LocalTime
+ setHoraFin(LocalTime)

Clase: Facultad
- personas: List<Persona>
- nombre: String
+ Facultad(String)
+ getPersonas(): List<Persona>
+ agregarPersona(Persona)
+ eliminarPersona(Persona)
+ buscarPersonaPorCI(String): Persona
+ actualizarPersona(String, Persona): boolean
+ getNombre(): String
+ setNombre(String)

Clase: GuardiaFactory
- horario: Horario
- calendario: Calendario
- guardias: List<Guardia>
- guardiasCumplidas: List<Guardia>
- guardiasIncumplidas: List<Guardia>
- nextId: int
+ GuardiaFactory()
+ getGuardiasIncumplidas(): List<Guardia>
+ getGuardiasCumplidas(): List<Guardia>
+ getCalendario(): Calendario
+ setCalendario(Calendario)
+ getHorario(): Horario
+ setHorario(Horario)
+ getGuardias(): List<Guardia>
+ setGuardias(List<Guardia>)
+ crearGuardia(TipoGuardia, Persona, Horario): boolean
+ registrarCumplimientoGuardia(int): boolean
+ registrarIncumplimientoGuardia(int): boolean
+ buscarGuardiaPorId(int): Guardia
+ actualizarGuardia(int, TipoGuardia, Persona, Horario): boolean
+ eliminarGuardia(int): boolean
+ planificarGuardiasMes(Facultad, int, int): List<Guardia>
+ planificarGuardiasRecuperacion(int, int)
+ obtenerGuardiasPorPersona(Persona): GuardiasPorPersona
# GuardiasPorPersona (clase interna): asignadas, cumplidas, incumplidas
// Métodos que faltaban en el txt:
+ clasificarPersonas(List<Persona>, List<Trabajador>, List<Estudiante>, List<Estudiante>): void
+ revisarGuardiasIncumplidas(int, int): void
+ planificarGuardiasJulioAgosto(List<Trabajador>, List<Guardia>, int, int): void
+ planificarGuardiasRestoDelAnio(List<Estudiante>, List<Estudiante>, List<Trabajador>, List<Guardia>, int, int): void
+ existeGuardia(Persona, Horario): boolean
+ agregarGuardiasNoDuplicadas(List<Guardia>): void
+ seleccionarEstudianteRecuperacionPrimero(List<Estudiante>): Estudiante
+ seleccionarTrabajadorParaGuardia(List<Trabajador>): Trabajador


Clase: PlanificadorGuardias (Singleton)
- facultad: Facultad
- calendario: Calendario
- guardiaFactory: GuardiaFactory
- instancia: static PlanificadorGuardias
+ getFacultad(): Facultad
+ getCalendario(): Calendario
+ getGuardiaFactory(): GuardiaFactory
+ getInstancia(): PlanificadorGuardias
+ reporteGuardiasRecuperacionPorGrupo(): List<GrupoRecuperacionReporte>
+ estudiantesPorGrupoRecuperacionDesc(): List<GrupoRecuperacionOrdenado>
+ agregarProfesoresPrueba()
+ agregarEstudiantesVaronesPrueba()
+ agregarEstudiantesMujeresPrueba()
+ reporteProfesoresVoluntariosEnVacaciones(): List<Trabajador>
+ listaGuardiasEnDiasFestivos(): List<Guardia>
+ planificarGuardiasRecuperacion(int, int)
+ reportePersonasInactivas(): ReporteInactivos
+ buscarTrabajadores(String): List<Trabajador>


Clase: DiaFestivo
- fecha: LocalDate
- descripcion: String
+ DiaFestivo(LocalDate, String)
+ getFecha(): LocalDate
+ setFecha(LocalDate)
+ getDescripcion(): String
+ setDescripcion(String)
+ getFechaString(): String

Clase: Calendario
- diasFestivos: List<DiaFestivo>
+ Calendario()
+ setDiasFestivos(List<DiaFestivo>)
+ getDiasFestivos(): List<DiaFestivo>
+ agregarDiaFestivo(DiaFestivo)
+ obtenerDiaFestivo(LocalDate): DiaFestivo
+ actualizarDiaFestivo(LocalDate, String): boolean
+ eliminarDiaFestivo(LocalDate): boolean
+ existeDiaFestivo(LocalDate): boolean
+ agregarDiasFestivosPrueba()
+ getInstancia(): Calendario

Relaciones entre clases (tipo y cardinalidad):

- Estudiante y Trabajador heredan de Persona (herencia).
- Facultad 1 --- * Persona (composición): Una Facultad contiene muchos Personas.
- GuardiaFactory 1 --- * Guardia (composición): Un GuardiaFactory contiene muchas Guardias.
- GuardiaFactory 1 --- * Guardia (composición): Un GuardiaFactory contiene muchas guardiasCumplidas.
- GuardiaFactory 1 --- * Guardia (composición): Un GuardiaFactory contiene muchas guardiasIncumplidas.
- GuardiaFactory 1 --- 1 Calendario (asociación): Un GuardiaFactory tiene un Calendario.
- GuardiaFactory 1 --- 1 Horario (asociación): Un GuardiaFactory tiene un Horario.
- Guardia 1 --- 1 Persona (asociación): Una Guardia está asociada a una Persona.
- Guardia 1 --- 1 Horario (asociación): Una Guardia está asociada a un Horario.
- PlanificadorGuardias 1 --- 1 Facultad (composición): Un PlanificadorGuardias contiene una Facultad.
- PlanificadorGuardias 1 --- 1 Calendario (composición): Un PlanificadorGuardias contiene un Calendario.
- PlanificadorGuardias 1 --- 1 GuardiaFactory (composición): Un PlanificadorGuardias contiene un GuardiaFactory.
- Calendario 1 --- * DiaFestivo (composición): Un Calendario contiene muchos DiasFestivos.
- DiaFestivo es usado por Calendario (asociación).
- Horario es usado por Guardia y Persona (asociación).
- Persona usa Sexo (enum) (asociación).
- Guardia usa TipoGuardia (enum) (asociación).
